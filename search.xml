<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>欢迎来到我的博客园</title>
    <url>/2020/12/12/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9B%AD/</url>
    <content><![CDATA[<h2 id="我是谁？"><a href="#我是谁？" class="headerlink" title="我是谁？"></a>我是谁？</h2><p>普通高校的菜鸡学生，CTF未入门选手。</p>
<h2 id="搞什么？"><a href="#搞什么？" class="headerlink" title="搞什么？"></a>搞什么？</h2><p><del>被迫</del>搭博客写wp，虽然很无奈但是也挺好的吧。</p>
]]></content>
  </entry>
  <entry>
    <title>2020ctf新生赛wp</title>
    <url>/2020/12/12/2020sdu%E6%96%B0%E7%94%9F%E8%B5%9Bwp/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><blockquote>
<ul>
<li><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4></li>
</ul>
<p>一串字符，没有什么奇怪的符号，base家族挨个试一下，发现base16能解码出flag（只有前几个大写字母，大概率是base16）。</p>
<ul>
<li><h4 id="不说人话？"><a href="#不说人话？" class="headerlink" title="不说人话？"></a>不说人话？</h4></li>
</ul>
<p>下载，解压，得到一个不知道是啥的文件，根据Misc解题法则，管他是什么先拖进16进制编辑器里look look，然后就发现一个五角星</p>
<p><img src="D:/blog/moonflowersl/source/_posts/不说人话1.png"></p>
<p>（然而好像并没有）什么卵用……</p>
<p>再观察一下发现出现的字符只有’&gt;’, ‘&lt;’, ‘+’, ‘-‘, ‘.’几种，那这大概就是Brainfuck或Ook！了（**brainfuck**又被称为**brainf**k**或者**BF**，**brainfuck**语言用**&gt; &lt; + - . , [ ]**八种符号来替换C语言的各种语法和命令）。</p>
<p>百度一个<a href="https://www.splitbrain.org/services/ook">在线解密网站 </a> 复制粘贴解出flag。</p>
<ul>
<li><h4 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h4></li>
</ul>
<p><del>BUUCTF原题</del></p>
<p>LSB 隐写术，即最低有效位（Least Significant Bit）隐写术。是一种比较简单的基于二进制的隐写方式，能将一个完整的文件隐藏进另一张图片中。图像一般都是以RGB三原色的方式存储的，存储后R（红）、G（绿）、B（蓝）三组数据按顺序规律排列，每个的取值范围为0~255，范围对应的二进制值就是00000000-11111111，LSB就是把一个文件的二进制每一位拆分修改到图片的色彩数据的二进制值最低位。</p>
<p>​                                                                                                                        ——来自百度</p>
<p>也就是说每种颜色是由8个bit存储的二进制位，我悄悄地改掉最后一位几乎是看不出来了，所以信息就被有效隐写了。</p>
<p>处理LSB隐写的最常用的工具就是Stegsolve，用它打开压缩包里的图片，操作方式：Analyse→Data Extract→选择red,blue,green中 的0（此时发现Extract Preview中的16进制文件是个png）→Save bin（后缀名为.png）。得到一个二维码，在线扫一下得到flag。</p>
</blockquote>
</li>
<li><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><blockquote>
<ul>
<li><h4 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h4><p>凯撒密码显而易见了，Notifications中提供了<a href="http://ctf.ssleye.com/">CTF在线工具</a></p>
<p>多试几次，发现key=13时，明文为attack_at_nine_o ‘clock_tonight。</p>
</li>
<li><h4 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h4><h5 id="rsa加密过程"><a href="#rsa加密过程" class="headerlink" title="rsa加密过程"></a>rsa加密过程</h5><ol>
<li>选取两个整数 p,q</li>
<li>求出 n = p * q</li>
<li>求 n 的欧拉函数 phi(n) = (p-1) * (q-1)</li>
<li>随机去一个整数 e 作为公钥，要求 e 和 phi(n) 互素</li>
<li>求出私钥 d : ed ≡ 1 (mod phi(n)) （d是e的逆元）</li>
</ol>
<h5 id="加密算法："><a href="#加密算法：" class="headerlink" title="加密算法："></a>加密算法：</h5><p>c = pow(m,e,n)</p>
<h5 id="解密算法："><a href="#解密算法：" class="headerlink" title="解密算法："></a>解密算法：</h5><p>m =pow(c,d,n)</p>
<h6 id="关于题目："><a href="#关于题目：" class="headerlink" title="关于题目："></a>关于题目：</h6><p>题目中已经给了c,n,e了，思路也就很明显了：先把n分解成p,q（Notifications中提供了<a href="http://www.factordb.com/">大整数分解网站</a>），知道了p,q就可以求出phi(n),再用扩展欧几里得算法求出e再mod n下的逆元d，最后求出m。</p>
</li>
</ul>
<p>  脚本如下：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">67692316911846383515666937548215377516026242122014572162117994514425606283681</span></span><br><span class="line">n = <span class="number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span></span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = <span class="number">366669102002966856876605669837014229419</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure>

<p>  （最后要用libnum中的n2s将得到的m转化为字符串）。</p>
<ul>
<li><h4 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h4><p>又是rsa算法，但是打开txt发现有两个e和c，推测应该是用共模数攻击了。</p>
<h5 id="rsa的共模数攻击："><a href="#rsa的共模数攻击：" class="headerlink" title="rsa的共模数攻击："></a>rsa的共模数攻击：</h5><p>因为我们手上有一对明文和对应的公钥，那么如果有整数x, y使得：</p>
<p>e1 * x + e2 * y = 1</p>
<p>那么就可以有：</p>
<p>m (mod n) = m ^ 1 (mod n) = m ^ (e1 * x + e2 *y ) (mod n) = m ^ (e1 * x) + m ^ (e2 * y)</p>
<p>又因为：</p>
<p> c1 = m ^ e1 (mod n)     c2 = m ^ e2 (mod n)</p>
<p>所以就有：</p>
<p>m (mod n) = c1 ^ x + c2 ^ y (mod n)</p>
<p>其中x，y可由扩展欧几里得算法求出</p>
</li>
</ul>
<p>  脚本如下：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">20429315528655111523073560675648813309162375303954090348572329091957960032412518712093691044501240262294304779722690063594446637140928522882936561204180425968593685714138402078212148627806816974924904301217144262198933589412344408694401386330925556100970326676200349102533012051159456051076045413561059070291766268594455676378031127514060030926838750670330939410961355756909171469945402924037610757364146531235448523106870829710488056210511070536574177473906753241807683881800419949735443822439277498329376433536971257102334607742626401589209417830185425783917209141580607207923687068496513264733739213966151881471319</span></span><br><span class="line">e1 = <span class="number">4106294671</span></span><br><span class="line">e2 = <span class="number">4103337937</span></span><br><span class="line">c1 = <span class="number">12051796366524088489284445109295502686341498426965277230069915294159131976231473789977279364263965099422235647723775278060569378071469131866368399394772898224166518089593340803913798327451963589996734323497943301819051718709807518655868569656941242449109980876397661605271517459716669684900920279597477446629607627693769738733623143693170696779851882404994923673483971528314806130892416509854017091137325195201225617407959645788145876202882024723106204183257094755002924708009138560347432552090905489132135154932987521239299578509008290614398700799670928805692609756924823628055245227290288940649158862576448537833423</span></span><br><span class="line">c2 = <span class="number">16648382384980770705624348910895797622774711113202207693584907182552301186239613809347201161450012615995859738410661452438496756353485538305614949211776668793864984429696790944750894691957799234264508530084026894611228513698963347402329109838109621609770406925700520983387811451074838470370044678634099202003480925903267508744006195455234025325060817223813858985074720872124168142943926467694676717713503559007112874381750005406371400109962943508349497151148446064846096531445037416174913915923050332242843403926133165817310272633884358263778516770288515592959832151762499526363131801945163501999337808208074381212795</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">n2s</span>(<span class="params">num</span>):</span></span><br><span class="line">    t = <span class="built_in">hex</span>(num)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t) % <span class="number">2</span> == <span class="number">1</span> :</span><br><span class="line">        t = t + <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(b, <span class="number">16</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> [ t[ i : i+<span class="number">2</span> ] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(t), <span class="number">2</span>)]])</span><br><span class="line"><span class="comment">#这句是网上抄的，但这句话写的是真的好</span></span><br><span class="line"></span><br><span class="line">s = gmpy2.gcdext(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = -s[<span class="number">2</span>]</span><br><span class="line">c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = (<span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n)) % n</span><br><span class="line">print(n2s(m))</span><br><span class="line"><span class="comment">#print(libnum.n2s(m)) libnum.n2s好像因为m太大了转不了，但我用m得到的字符串用libnum.s2n却能转回来（玄学）</span></span><br></pre></td></tr></table></figure>

<h5 id="关于大整数转字符串的原理"><a href="#关于大整数转字符串的原理" class="headerlink" title="关于大整数转字符串的原理"></a>关于大整数转字符串的原理</h5><p>  计算机存储中，一个字节8个bit，代表数值是0~255，这个数值就是ascii码中对应的字符。</p>
<p>  一个16进制表示的数刚好占4个bit，所以两个16进制位就可以有一个对应的字符。</p>
<p>  剩下的你懂的（doge）</p>
</blockquote>
</li>
</ul>
<ul>
<li><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><blockquote>
<ul>
<li><h4 id="阴间2048"><a href="#阴间2048" class="headerlink" title="阴间2048"></a>阴间2048</h4></li>
</ul>
<p>拿到题目先玩会（说不定就有flag了呢），然而玩了几千分也没见什么异常，旁边三个连接点了点也没得到什么有用的东西（出题人总不能把flag藏在人家的GitHub项目里面吧）。</p>
<p>按照web套路，F12看源码，network刷新一下看看包</p>
<p><img src="D:/blog/moonflowersl/source/_posts/阴间2048.png"></p>
<p>哦？发现了一个别致的小东西</p>
<p>然后打开game.js看看有没有奇怪的地方</p>
<p><img src="D:/blog/moonflowersl/source/_posts/阴间20482.png"></p>
<p>写个游戏能搞个这玩意？？？</p>
<p>按照它说的向网页get一下，成功得到flag</p>
<p><img src="E:\Typora\makedown\阴间20483.png"></p>
</blockquote>
</li>
</ul>
</blockquote>
<p>4个小时就搞了这点（我太菜了），web第二题最后一步死活搞不对了，web第三题打开发现是个代码审计，再看看时间，下次一定。</p>
]]></content>
  </entry>
</search>
